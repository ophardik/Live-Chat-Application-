{"ast":null,"code":"var _s = $RefreshSig$();\n// // import { useEffect } from \"react\"\n// // import { useDispatch, useSelector } from \"react-redux\"\n// // import { setMessages } from \"../redux/messageSlice\"\n\n// // const useGetRealTimeMessage= async()=>{\n// //     const{socket}=useSelector(store=>store.socket)\n// //     const{messages}=useSelector(store=>store.message)\n// //     const dispatch=useDispatch()\n// //    useEffect(()=>{\n// //      socket?.(\"newMessage\",(newMessage)=>{\n// //      dispatch(setMessages([...messages,newMessage]))\n// //      })\n// //    },[socket,setMessages,messages])\n// // }\n// // export default useGetRealTimeMessage\n\n// import { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setMessages } from \"../redux/messageSlice\";\n\n// const useGetRealTimeMessage = () => {\n//     const { socket } = useSelector((store) => store.socket);\n//     const { messages } = useSelector((store) => store.message);\n//     const dispatch = useDispatch();\n//     console.log(\"Socket\",socket)\n\n//     useEffect(() => {\n//         if (socket) {\n//             console.log(\"Socket\",socket)\n//             const handleNewMessage = (newMessage) => {\n//               dispatch(setMessages([...messages, newMessage]));\n//               console.log(\"Received new message:\", newMessage)\n//             };\n\n//             socket.on(\"newMessage\", handleNewMessage);\n\n//             // Clean up the event listener when the component unmounts\n//             return () => {\n//                 socket.off(\"newMessage\", handleNewMessage);\n//             };\n//         }\n//     }, [socket, messages, dispatch]);\n\n//     return null; // No UI output needed from this hook\n// };\n\n// export default useGetRealTimeMessage;\n\n// Hooks/useGetRealTimeMessage.js\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMessages } from \"../redux/messageSlice\";\nconst useGetRealTimeMessage = () => {\n  _s();\n  const {\n    socket\n  } = useSelector(store => store.socket);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (socket) {\n      console.log(\"Socket:\", socket);\n      const handleNewMessage = newMessage => {\n        dispatch(setMessages(prevMessages => [...prevMessages, newMessage]));\n        console.log(\"Received new message:\", newMessage);\n      };\n      socket.on(\"newMessage\", handleNewMessage);\n      return () => {\n        socket.off(\"newMessage\", handleNewMessage);\n      };\n    }\n  }, [socket, dispatch]);\n  return null;\n};\n_s(useGetRealTimeMessage, \"zXFfd9j2Cp66oSgRplAgup8Wf6s=\", false, function () {\n  return [useSelector, useDispatch];\n});\nexport default useGetRealTimeMessage;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setMessages","useGetRealTimeMessage","_s","socket","store","dispatch","console","log","handleNewMessage","newMessage","prevMessages","on","off"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Hooks/useRealTimeMessages.js"],"sourcesContent":["// // import { useEffect } from \"react\"\r\n// // import { useDispatch, useSelector } from \"react-redux\"\r\n// // import { setMessages } from \"../redux/messageSlice\"\r\n\r\n// // const useGetRealTimeMessage= async()=>{\r\n// //     const{socket}=useSelector(store=>store.socket)\r\n// //     const{messages}=useSelector(store=>store.message)\r\n// //     const dispatch=useDispatch()\r\n// //    useEffect(()=>{\r\n// //      socket?.(\"newMessage\",(newMessage)=>{\r\n// //      dispatch(setMessages([...messages,newMessage]))\r\n// //      })\r\n// //    },[socket,setMessages,messages])\r\n// // }\r\n// // export default useGetRealTimeMessage\r\n\r\n\r\n// import { useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setMessages } from \"../redux/messageSlice\";\r\n\r\n// const useGetRealTimeMessage = () => {\r\n//     const { socket } = useSelector((store) => store.socket);\r\n//     const { messages } = useSelector((store) => store.message);\r\n//     const dispatch = useDispatch();\r\n//     console.log(\"Socket\",socket)\r\n\r\n//     useEffect(() => {\r\n//         if (socket) {\r\n//             console.log(\"Socket\",socket)\r\n//             const handleNewMessage = (newMessage) => {\r\n//               dispatch(setMessages([...messages, newMessage]));\r\n//               console.log(\"Received new message:\", newMessage)\r\n//             };\r\n\r\n//             socket.on(\"newMessage\", handleNewMessage);\r\n\r\n//             // Clean up the event listener when the component unmounts\r\n//             return () => {\r\n//                 socket.off(\"newMessage\", handleNewMessage);\r\n//             };\r\n//         }\r\n//     }, [socket, messages, dispatch]);\r\n\r\n//     return null; // No UI output needed from this hook\r\n// };\r\n\r\n// export default useGetRealTimeMessage;\r\n\r\n\r\n\r\n// Hooks/useGetRealTimeMessage.js\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMessages } from \"../redux/messageSlice\";\r\n\r\nconst useGetRealTimeMessage = () => {\r\n  const { socket } = useSelector((store) => store.socket);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      console.log(\"Socket:\", socket);\r\n      const handleNewMessage = (newMessage) => {\r\n        dispatch(setMessages((prevMessages) => [...prevMessages, newMessage]));\r\n        console.log(\"Received new message:\", newMessage);\r\n      };\r\n\r\n      socket.on(\"newMessage\", handleNewMessage);\r\n\r\n      return () => {\r\n        socket.off(\"newMessage\", handleNewMessage);\r\n      };\r\n    }\r\n  }, [socket, dispatch]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default useGetRealTimeMessage;\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAO,CAAC,GAAGJ,WAAW,CAAEK,KAAK,IAAKA,KAAK,CAACD,MAAM,CAAC;EACvD,MAAME,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAIM,MAAM,EAAE;MACVG,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,MAAM,CAAC;MAC9B,MAAMK,gBAAgB,GAAIC,UAAU,IAAK;QACvCJ,QAAQ,CAACL,WAAW,CAAEU,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC,CAAC;QACtEH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,UAAU,CAAC;MAClD,CAAC;MAEDN,MAAM,CAACQ,EAAE,CAAC,YAAY,EAAEH,gBAAgB,CAAC;MAEzC,OAAO,MAAM;QACXL,MAAM,CAACS,GAAG,CAAC,YAAY,EAAEJ,gBAAgB,CAAC;MAC5C,CAAC;IACH;EACF,CAAC,EAAE,CAACL,MAAM,EAAEE,QAAQ,CAAC,CAAC;EAEtB,OAAO,IAAI;AACb,CAAC;AAACH,EAAA,CArBID,qBAAqB;EAAA,QACNF,WAAW,EACbD,WAAW;AAAA;AAqB9B,eAAeG,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}