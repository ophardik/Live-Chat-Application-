{"ast":null,"code":"// // import React, { createContext, useContext, useEffect, useState } from 'react';\n// // import { io } from 'socket.io-client';\n\n// // const SocketContext = createContext(null);\n\n// // export const SocketProvider = ({ children, authUser }) => {\n// //   const [socket, setSocket] = useState(null);\n\n// //   useEffect(() => {\n// //     if (authUser) {\n// //       const newSocket = io('http://localhost:8005', {\n// //         query: { userId: authUser._id },\n// //       });\n// //       setSocket(newSocket);\n\n// //       newSocket.on('connect', () => {\n// //         console.log('Connected to server');\n// //       });\n\n// //       newSocket.on('disconnect', () => {\n// //         console.log('Disconnected from server');\n// //       });\n\n// //       return () => {\n// //         newSocket.disconnect();\n// //       };\n// //     }\n// //   }, [authUser]);\n\n// //   return (\n// //     <SocketContext.Provider value={socket}>\n// //       {children}\n// //     </SocketContext.Provider>\n// //   );\n// // };\n\n// // export const useSocket = () => useContext(SocketContext);\n// // Contexts/SocketContext.js\n// import React, { createContext, useContext, useEffect, useState } from 'react';\n// import { io } from 'socket.io-client';\n// import { useSelector } from 'react-redux';\n\n// const SocketContext = createContext();\n\n// export const useSocket = () => useContext(SocketContext);\n\n// export const SocketProvider = ({ children }) => {\n//   const { authUser } = useSelector(store => store.user);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     if (authUser) {\n//       const newSocket = io('http://localhost:8005', {\n//         query: { userId: authUser._id },\n//         withCredentials: true,\n//       });\n//       setSocket(newSocket);\n\n//       return () => newSocket.close();\n//     }\n//   }, [authUser]);\n\n//   return (\n//     <SocketContext.Provider value={socket}>\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Contexts/SocketContext.js"],"sourcesContent":["// // import React, { createContext, useContext, useEffect, useState } from 'react';\r\n// // import { io } from 'socket.io-client';\r\n\r\n// // const SocketContext = createContext(null);\r\n\r\n// // export const SocketProvider = ({ children, authUser }) => {\r\n// //   const [socket, setSocket] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     if (authUser) {\r\n// //       const newSocket = io('http://localhost:8005', {\r\n// //         query: { userId: authUser._id },\r\n// //       });\r\n// //       setSocket(newSocket);\r\n\r\n// //       newSocket.on('connect', () => {\r\n// //         console.log('Connected to server');\r\n// //       });\r\n\r\n// //       newSocket.on('disconnect', () => {\r\n// //         console.log('Disconnected from server');\r\n// //       });\r\n\r\n// //       return () => {\r\n// //         newSocket.disconnect();\r\n// //       };\r\n// //     }\r\n// //   }, [authUser]);\r\n\r\n// //   return (\r\n// //     <SocketContext.Provider value={socket}>\r\n// //       {children}\r\n// //     </SocketContext.Provider>\r\n// //   );\r\n// // };\r\n\r\n// // export const useSocket = () => useContext(SocketContext);\r\n// // Contexts/SocketContext.js\r\n// import React, { createContext, useContext, useEffect, useState } from 'react';\r\n// import { io } from 'socket.io-client';\r\n// import { useSelector } from 'react-redux';\r\n\r\n// const SocketContext = createContext();\r\n\r\n// export const useSocket = () => useContext(SocketContext);\r\n\r\n// export const SocketProvider = ({ children }) => {\r\n//   const { authUser } = useSelector(store => store.user);\r\n//   const [socket, setSocket] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (authUser) {\r\n//       const newSocket = io('http://localhost:8005', {\r\n//         query: { userId: authUser._id },\r\n//         withCredentials: true,\r\n//       });\r\n//       setSocket(newSocket);\r\n\r\n//       return () => newSocket.close();\r\n//     }\r\n//   }, [authUser]);\r\n\r\n//   return (\r\n//     <SocketContext.Provider value={socket}>\r\n//       {children}\r\n//     </SocketContext.Provider>\r\n//   );\r\n// };\r\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}