{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardik\\\\OneDrive\\\\Desktop\\\\LiveChatApplication\\\\frontend\\\\src\\\\Contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useEffect, useState } from 'react';\n// import { io } from 'socket.io-client';\n// import { useSelector } from 'react-redux';\n\n// const SocketContext = createContext(null);\n\n// export const SocketProvider = ({ children }) => {\n//   const authUser = useSelector((state) => state.user.authUser); // Use the correct path to access authUser\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     if (authUser) {\n//       const newSocket = io('http://localhost:8005', {\n//         query: { userId: authUser._id },\n//       });\n//       setSocket(newSocket);\n\n//       newSocket.on('connect', () => {\n//         console.log('Connected to server');\n//       });\n\n//       newSocket.on('disconnect', () => {\n//         console.log('Disconnected from server');\n//       });\n\n//       return () => {\n//         newSocket.disconnect();\n//       };\n//     }\n//   }, [authUser]);\n\n//   return (\n//     <SocketContext.Provider value={socket}>\n//       {children}\n//     </SocketContext.Provider>\n//   );\n// };\n\n// export const useSocket = () => useContext(SocketContext);\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setOnlineUsers } from '../redux/userSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const authUser = useSelector(state => state.user.authUser);\n  const dispatch = useDispatch();\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    if (authUser) {\n      const newSocket = io('http://localhost:8005', {\n        query: {\n          userId: authUser._id\n        }\n      });\n      setSocket(newSocket);\n      newSocket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      newSocket.on('disconnect', () => {\n        console.log('Disconnected from server');\n      });\n      newSocket.on('getOnlineUsers', onlineUsers => {\n        console.log('Received online users:', onlineUsers); // Debug log\n        dispatch(setOnlineUsers(onlineUsers));\n      });\n      return () => {\n        newSocket.disconnect();\n      };\n    }\n  }, [authUser, dispatch]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: socket,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"wv+zmw3cvl4oY4RCW4IkD93CDk4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  return useContext(SocketContext);\n};\n_s2(useSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useSelector","useDispatch","setOnlineUsers","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","authUser","state","user","dispatch","socket","setSocket","newSocket","query","userId","_id","on","console","log","onlineUsers","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","$RefreshReg$"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Contexts/SocketContext.js"],"sourcesContent":["// import React, { createContext, useContext, useEffect, useState } from 'react';\r\n// import { io } from 'socket.io-client';\r\n// import { useSelector } from 'react-redux';\r\n\r\n// const SocketContext = createContext(null);\r\n\r\n// export const SocketProvider = ({ children }) => {\r\n//   const authUser = useSelector((state) => state.user.authUser); // Use the correct path to access authUser\r\n//   const [socket, setSocket] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (authUser) {\r\n//       const newSocket = io('http://localhost:8005', {\r\n//         query: { userId: authUser._id },\r\n//       });\r\n//       setSocket(newSocket);\r\n\r\n//       newSocket.on('connect', () => {\r\n//         console.log('Connected to server');\r\n//       });\r\n\r\n//       newSocket.on('disconnect', () => {\r\n//         console.log('Disconnected from server');\r\n//       });\r\n\r\n//       return () => {\r\n//         newSocket.disconnect();\r\n//       };\r\n//     }\r\n//   }, [authUser]);\r\n\r\n//   return (\r\n//     <SocketContext.Provider value={socket}>\r\n//       {children}\r\n//     </SocketContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useSocket = () => useContext(SocketContext);\r\n\r\n\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setOnlineUsers } from '../redux/userSlice';\r\n\r\nconst SocketContext = createContext(null);\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const authUser = useSelector((state) => state.user.authUser); \r\n  const dispatch = useDispatch();\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (authUser) {\r\n      const newSocket = io('http://localhost:8005', {\r\n        query: { userId: authUser._id },\r\n      });\r\n      setSocket(newSocket);\r\n\r\n      newSocket.on('connect', () => {\r\n        console.log('Connected to server');\r\n      });\r\n\r\n      newSocket.on('disconnect', () => {\r\n        console.log('Disconnected from server');\r\n      });\r\n\r\n      newSocket.on('getOnlineUsers', (onlineUsers) => {\r\n        console.log('Received online users:', onlineUsers); // Debug log\r\n        dispatch(setOnlineUsers(onlineUsers));\r\n      });\r\n\r\n      return () => {\r\n        newSocket.disconnect();\r\n      };\r\n    }\r\n  }, [authUser, dispatch]);\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSocket = () => useContext(SocketContext);\r\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,aAAa,gBAAGV,aAAa,CAAC,IAAI,CAAC;AAEzC,OAAO,MAAMW,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAMC,QAAQ,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;EAC5D,MAAMG,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,IAAIY,QAAQ,EAAE;MACZ,MAAMM,SAAS,GAAGhB,EAAE,CAAC,uBAAuB,EAAE;QAC5CiB,KAAK,EAAE;UAAEC,MAAM,EAAER,QAAQ,CAACS;QAAI;MAChC,CAAC,CAAC;MACFJ,SAAS,CAACC,SAAS,CAAC;MAEpBA,SAAS,CAACI,EAAE,CAAC,SAAS,EAAE,MAAM;QAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MACpC,CAAC,CAAC;MAEFN,SAAS,CAACI,EAAE,CAAC,YAAY,EAAE,MAAM;QAC/BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACzC,CAAC,CAAC;MAEFN,SAAS,CAACI,EAAE,CAAC,gBAAgB,EAAGG,WAAW,IAAK;QAC9CF,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,WAAW,CAAC,CAAC,CAAC;QACpDV,QAAQ,CAACV,cAAc,CAACoB,WAAW,CAAC,CAAC;MACvC,CAAC,CAAC;MAEF,OAAO,MAAM;QACXP,SAAS,CAACQ,UAAU,CAAC,CAAC;MACxB,CAAC;IACH;EACF,CAAC,EAAE,CAACd,QAAQ,EAAEG,QAAQ,CAAC,CAAC;EAExB,oBACER,OAAA,CAACC,aAAa,CAACmB,QAAQ;IAACC,KAAK,EAAEZ,MAAO;IAAAN,QAAA,EACnCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACrB,EAAA,CApCWF,cAAc;EAAA,QACRN,WAAW,EACXC,WAAW;AAAA;AAAA6B,EAAA,GAFjBxB,cAAc;AAsC3B,OAAO,MAAMyB,SAAS,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMpC,UAAU,CAACS,aAAa,CAAC;AAAA;AAAC2B,GAAA,CAA5CD,SAAS;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}