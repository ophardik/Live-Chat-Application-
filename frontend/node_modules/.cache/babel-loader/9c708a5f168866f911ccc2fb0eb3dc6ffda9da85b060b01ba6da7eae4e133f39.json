{"ast":null,"code":"var _s = $RefreshSig$();\n// // import { useEffect } from \"react\"\n// // import { useDispatch, useSelector } from \"react-redux\"\n// // import { setMessages } from \"../redux/messageSlice\"\n\n// // const useGetRealTimeMessage= async()=>{\n// //     console.log(\"useGetRealTimeMessage gets hitttt\")\n// //     const{socket}=useSelector(store=>store.socket)\n// //     console.log(\"socket\",socket)\n\n// //     const{messages}=useSelector(store=>store.message)\n// //     console.log(\"messages\",messages)\n\n// //     const dispatch=useDispatch()\n// //    useEffect(()=>{\n// //      socket?.on(\"newMessage\",(newMessage)=>{\n// //         console.log(\"newMessageeeeeeee\",newMessage)\n\n// //      dispatch(setMessages([...messages,newMessage]))\n// //      })\n// //    },[socket,setMessages,messages])\n// // }\n// // export default useGetRealTimeMessage\n\n// import { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setMessages } from \"../redux/messageSlice\";\n// import { useSocket } from '../Contexts/SocketContext';\n\n// const useGetRealTimeMessage = () => {\n//   const socket = useSocket();\n//   const { messages } = useSelector(store => store.message);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     if (socket) {\n//       socket.on(\"newMessage\", (newMessage) => {\n//         dispatch(setMessages([...messages, newMessage]));\n//       });\n//     }\n//   }, [socket, messages, dispatch]);\n// };\n\n// export default useGetRealTimeMessage;\n\n// import { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setMessages } from \"../redux/messageSlice\";\n// import { useSocket } from '../Contexts/SocketContext';\n\n// const useGetRealTimeMessage = () => {\n//   const socket = useSocket();\n//   const { messages } = useSelector(store => store.message);\n//   const { authUser } = useSelector(store => store.user); // Ensure authUser is available\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     if (socket && authUser) {\n//       socket.on(\"newMessage\", (newMessage) => {\n//         // Only add the message if it's intended for the current user\n//         if (newMessage.receiverId === authUser._id) {\n//           dispatch(setMessages([...messages, newMessage]));\n//         }\n//       });\n//     }\n//   }, [socket, messages, authUser, dispatch]);\n// };\n\n// export default useGetRealTimeMessage;\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addMessage } from '../redux/messageSlice';\nimport { useSocket } from '../Contexts/SocketContext';\nconst useGetRealTimeMessage = () => {\n  _s();\n  const socket = useSocket();\n  const {\n    authUser,\n    selectedUser\n  } = useSelector(store => store.user);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (socket && authUser) {\n      socket.on('newMessage', newMessage => {\n        if (newMessage.receiverId === authUser._id && newMessage.senderId === (selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id) || newMessage.senderId === authUser._id && newMessage.receiverId === (selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser._id)) {\n          dispatch(addMessage(newMessage));\n        }\n      });\n    }\n    return () => {\n      if (socket) {\n        socket.off('newMessage');\n      }\n    };\n  }, [socket, authUser, selectedUser, dispatch]);\n};\n_s(useGetRealTimeMessage, \"7l5AbgXzsx2mTMtbJD0YyMRqMGo=\", false, function () {\n  return [useSocket, useSelector, useDispatch];\n});\nexport default useGetRealTimeMessage;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","addMessage","useSocket","useGetRealTimeMessage","_s","socket","authUser","selectedUser","store","user","dispatch","on","newMessage","receiverId","_id","senderId","off"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Hooks/useRealTimeMessages.js"],"sourcesContent":["// // import { useEffect } from \"react\"\r\n// // import { useDispatch, useSelector } from \"react-redux\"\r\n// // import { setMessages } from \"../redux/messageSlice\"\r\n\r\n// // const useGetRealTimeMessage= async()=>{\r\n// //     console.log(\"useGetRealTimeMessage gets hitttt\")\r\n// //     const{socket}=useSelector(store=>store.socket)\r\n// //     console.log(\"socket\",socket)\r\n\r\n// //     const{messages}=useSelector(store=>store.message)\r\n// //     console.log(\"messages\",messages)\r\n\r\n// //     const dispatch=useDispatch()\r\n// //    useEffect(()=>{\r\n// //      socket?.on(\"newMessage\",(newMessage)=>{\r\n// //         console.log(\"newMessageeeeeeee\",newMessage)\r\n\r\n// //      dispatch(setMessages([...messages,newMessage]))\r\n// //      })\r\n// //    },[socket,setMessages,messages])\r\n// // }\r\n// // export default useGetRealTimeMessage\r\n\r\n// import { useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setMessages } from \"../redux/messageSlice\";\r\n// import { useSocket } from '../Contexts/SocketContext';\r\n\r\n// const useGetRealTimeMessage = () => {\r\n//   const socket = useSocket();\r\n//   const { messages } = useSelector(store => store.message);\r\n//   const dispatch = useDispatch();\r\n\r\n//   useEffect(() => {\r\n//     if (socket) {\r\n//       socket.on(\"newMessage\", (newMessage) => {\r\n//         dispatch(setMessages([...messages, newMessage]));\r\n//       });\r\n//     }\r\n//   }, [socket, messages, dispatch]);\r\n// };\r\n\r\n// export default useGetRealTimeMessage;\r\n\r\n// import { useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setMessages } from \"../redux/messageSlice\";\r\n// import { useSocket } from '../Contexts/SocketContext';\r\n\r\n// const useGetRealTimeMessage = () => {\r\n//   const socket = useSocket();\r\n//   const { messages } = useSelector(store => store.message);\r\n//   const { authUser } = useSelector(store => store.user); // Ensure authUser is available\r\n//   const dispatch = useDispatch();\r\n\r\n//   useEffect(() => {\r\n//     if (socket && authUser) {\r\n//       socket.on(\"newMessage\", (newMessage) => {\r\n//         // Only add the message if it's intended for the current user\r\n//         if (newMessage.receiverId === authUser._id) {\r\n//           dispatch(setMessages([...messages, newMessage]));\r\n//         }\r\n//       });\r\n//     }\r\n//   }, [socket, messages, authUser, dispatch]);\r\n// };\r\n\r\n// export default useGetRealTimeMessage;\r\n\r\n\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addMessage } from '../redux/messageSlice';\r\nimport { useSocket } from '../Contexts/SocketContext';\r\n\r\nconst useGetRealTimeMessage = () => {\r\n  const socket = useSocket();\r\n  const { authUser, selectedUser } = useSelector(store => store.user);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (socket && authUser) {\r\n      socket.on('newMessage', (newMessage) => {\r\n        if (\r\n          (newMessage.receiverId === authUser._id && newMessage.senderId === selectedUser?._id) ||\r\n          (newMessage.senderId === authUser._id && newMessage.receiverId === selectedUser?._id)\r\n        ) {\r\n          dispatch(addMessage(newMessage));\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (socket) {\r\n        socket.off('newMessage');\r\n      }\r\n    };\r\n  }, [socket, authUser, selectedUser, dispatch]);\r\n};\r\n\r\nexport default useGetRealTimeMessage;\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,2BAA2B;AAErD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,MAAM,GAAGH,SAAS,CAAC,CAAC;EAC1B,MAAM;IAAEI,QAAQ;IAAEC;EAAa,CAAC,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EACnE,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,IAAIC,QAAQ,EAAE;MACtBD,MAAM,CAACM,EAAE,CAAC,YAAY,EAAGC,UAAU,IAAK;QACtC,IACGA,UAAU,CAACC,UAAU,KAAKP,QAAQ,CAACQ,GAAG,IAAIF,UAAU,CAACG,QAAQ,MAAKR,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEO,GAAG,KACnFF,UAAU,CAACG,QAAQ,KAAKT,QAAQ,CAACQ,GAAG,IAAIF,UAAU,CAACC,UAAU,MAAKN,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEO,GAAG,CAAC,EACrF;UACAJ,QAAQ,CAACT,UAAU,CAACW,UAAU,CAAC,CAAC;QAClC;MACF,CAAC,CAAC;IACJ;IAEA,OAAO,MAAM;MACX,IAAIP,MAAM,EAAE;QACVA,MAAM,CAACW,GAAG,CAAC,YAAY,CAAC;MAC1B;IACF,CAAC;EACH,CAAC,EAAE,CAACX,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAEG,QAAQ,CAAC,CAAC;AAChD,CAAC;AAACN,EAAA,CAvBID,qBAAqB;EAAA,QACVD,SAAS,EACWF,WAAW,EAC7BD,WAAW;AAAA;AAsB9B,eAAeI,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}