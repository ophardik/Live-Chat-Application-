{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMessages } from \"../redux/messageSlice\";\nconst useGetRealTimeMessage = async () => {\n  _s();\n  console.log(\"useGetRealTimeMessage gets hitttt\");\n  const {\n    socket\n  } = useSelector(store => store.socket);\n  console.log(\"socket\", socket);\n  const {\n    messages\n  } = useSelector(store => store.messages);\n  console.log(\"messages\", messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    socket === null || socket === void 0 ? void 0 : socket.on(\"newMessage\", newMessage => {\n      console.log(\"newMessageeeeeeee\", newMessage);\n      dispatch(setMessages([...messages, newMessage]));\n    });\n  }, [socket, setMessages, messages]);\n};\n_s(useGetRealTimeMessage, \"V88tA093ttBHvLKpkEXYBATY6mg=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\nexport default useGetRealTimeMessage;\n\n// import { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { setMessages } from \"../redux/messageSlice\";\n\n// const useGetRealTimeMessage = () => {\n//     const { socket } = useSelector((store) => store.socket);\n//     const { messages } = useSelector((store) => store.message);\n//     const dispatch = useDispatch();\n\n//     useEffect(() => {\n//         if (socket) {\n//             const handleNewMessage = (newMessage) => {\n//               dispatch(setMessages([...messages, newMessage]));\n//               console.log(\"Received new message:\", newMessage)\n//             };\n\n//             socket.on(\"newMessage\", handleNewMessage);\n\n//             // Clean up the event listener when the component unmounts\n//             return () => {\n//                 socket.off(\"newMessage\", handleNewMessage);\n//             };\n//         }\n//     }, [socket, messages, dispatch]);\n\n//     return null; // No UI output needed from this hook\n// };\n\n// export default useGetRealTimeMessage;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setMessages","useGetRealTimeMessage","_s","console","log","socket","store","messages","dispatch","on","newMessage"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Hooks/useRealTimeMessages.js"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { setMessages } from \"../redux/messageSlice\"\r\n\r\nconst useGetRealTimeMessage= async()=>{\r\n    console.log(\"useGetRealTimeMessage gets hitttt\")\r\n    const{socket}=useSelector(store=>store.socket)\r\n    console.log(\"socket\",socket)\r\n\r\n    const{messages}=useSelector(store=>store.messages)\r\n    console.log(\"messages\",messages)\r\n\r\n    const dispatch=useDispatch()\r\n   useEffect(()=>{\r\n     socket?.on(\"newMessage\",(newMessage)=>{\r\n        console.log(\"newMessageeeeeeee\",newMessage)\r\n\r\n     dispatch(setMessages([...messages,newMessage]))\r\n     })\r\n   },[socket,setMessages,messages])\r\n}\r\nexport default useGetRealTimeMessage\r\n\r\n\r\n// import { useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setMessages } from \"../redux/messageSlice\";\r\n\r\n// const useGetRealTimeMessage = () => {\r\n//     const { socket } = useSelector((store) => store.socket);\r\n//     const { messages } = useSelector((store) => store.message);\r\n//     const dispatch = useDispatch();\r\n\r\n//     useEffect(() => {\r\n//         if (socket) {\r\n//             const handleNewMessage = (newMessage) => {\r\n//               dispatch(setMessages([...messages, newMessage]));\r\n//               console.log(\"Received new message:\", newMessage)\r\n//             };\r\n\r\n//             socket.on(\"newMessage\", handleNewMessage);\r\n\r\n//             // Clean up the event listener when the component unmounts\r\n//             return () => {\r\n//                 socket.off(\"newMessage\", handleNewMessage);\r\n//             };\r\n//         }\r\n//     }, [socket, messages, dispatch]);\r\n\r\n//     return null; // No UI output needed from this hook\r\n// };\r\n\r\n// export default useGetRealTimeMessage;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,qBAAqB,GAAE,MAAAA,CAAA,KAAS;EAAAC,EAAA;EAClCC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;EAChD,MAAK;IAACC;EAAM,CAAC,GAACN,WAAW,CAACO,KAAK,IAAEA,KAAK,CAACD,MAAM,CAAC;EAC9CF,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACC,MAAM,CAAC;EAE5B,MAAK;IAACE;EAAQ,CAAC,GAACR,WAAW,CAACO,KAAK,IAAEA,KAAK,CAACC,QAAQ,CAAC;EAClDJ,OAAO,CAACC,GAAG,CAAC,UAAU,EAACG,QAAQ,CAAC;EAEhC,MAAMC,QAAQ,GAACV,WAAW,CAAC,CAAC;EAC7BD,SAAS,CAAC,MAAI;IACZQ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEI,EAAE,CAAC,YAAY,EAAEC,UAAU,IAAG;MACnCP,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACM,UAAU,CAAC;MAE9CF,QAAQ,CAACR,WAAW,CAAC,CAAC,GAAGO,QAAQ,EAACG,UAAU,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC,EAAC,CAACL,MAAM,EAACL,WAAW,EAACO,QAAQ,CAAC,CAAC;AACnC,CAAC;AAAAL,EAAA,CAhBKD,qBAAqB;EAAA,QAETF,WAAW,EAGTA,WAAW,EAGZD,WAAW;AAAA;AAS9B,eAAeG,qBAAqB;;AAGpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}