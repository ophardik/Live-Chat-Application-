{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useEffect } from \"react\"\n// import { useDispatch, useSelector } from \"react-redux\"\n// import { setMessages } from \"../redux/messageSlice\"\n\n// const useGetRealTimeMessage= async()=>{\n//     console.log(\"useGetRealTimeMessage gets hitttt\")\n//     const{socket}=useSelector(store=>store.socket)\n//     console.log(\"socket\",socket)\n\n//     const{messages}=useSelector(store=>store.message)\n//     console.log(\"messages\",messages)\n\n//     const dispatch=useDispatch()\n//    useEffect(()=>{\n//      socket?.on(\"newMessage\",(newMessage)=>{\n//         console.log(\"newMessageeeeeeee\",newMessage)\n\n//      dispatch(setMessages([...messages,newMessage]))\n//      })\n//    },[socket,setMessages,messages])\n// }\n// export default useGetRealTimeMessage\n\n// // import { useEffect } from \"react\";\n// // import { useDispatch, useSelector } from \"react-redux\";\n// // import { setMessages } from \"../redux/messageSlice\";\n\n// // const useGetRealTimeMessage = () => {\n// //     const { socket } = useSelector((store) => store.socket);\n// //     const { messages } = useSelector((store) => store.message);\n// //     const dispatch = useDispatch();\n\n// //     useEffect(() => {\n// //         if (socket) {\n// //             const handleNewMessage = (newMessage) => {\n// //               dispatch(setMessages([...messages, newMessage]));\n// //               console.log(\"Received new message:\", newMessage)\n// //             };\n\n// //             socket.on(\"newMessage\", handleNewMessage);\n\n// //             // Clean up the event listener when the component unmounts\n// //             return () => {\n// //                 socket.off(\"newMessage\", handleNewMessage);\n// //             };\n// //         }\n// //     }, [socket, messages, dispatch]);\n\n// //     return null; // No UI output needed from this hook\n// // };\n\n// // export default useGetRealTimeMessage;\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMessages } from \"../redux/messageSlice\";\nconst useGetRealTimeMessage = socket => {\n  _s();\n  const messages = useSelector(store => store.message.messages); // Assuming messages is an array in message slice\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (socket) {\n      console.log(\"Socket is available\", socket);\n      socket.on(\"newMessage\", newMessage => {\n        console.log(\"newMessage\", newMessage);\n        dispatch(setMessages([...messages, newMessage]));\n      });\n\n      // Cleanup to remove the event listener when the component unmounts or socket changes\n      return () => {\n        socket.off(\"newMessage\");\n      };\n    }\n  }, [socket, messages, dispatch]);\n  return null; // If the hook does not return anything\n};\n_s(useGetRealTimeMessage, \"UjPMIjZKuWeAy1BmGUg+xhn1/g4=\", false, function () {\n  return [useSelector, useDispatch];\n});\nexport default useGetRealTimeMessage;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setMessages","useGetRealTimeMessage","socket","_s","messages","store","message","dispatch","console","log","on","newMessage","off"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Hooks/useRealTimeMessages.js"],"sourcesContent":["// import { useEffect } from \"react\"\r\n// import { useDispatch, useSelector } from \"react-redux\"\r\n// import { setMessages } from \"../redux/messageSlice\"\r\n\r\n// const useGetRealTimeMessage= async()=>{\r\n//     console.log(\"useGetRealTimeMessage gets hitttt\")\r\n//     const{socket}=useSelector(store=>store.socket)\r\n//     console.log(\"socket\",socket)\r\n\r\n//     const{messages}=useSelector(store=>store.message)\r\n//     console.log(\"messages\",messages)\r\n\r\n//     const dispatch=useDispatch()\r\n//    useEffect(()=>{\r\n//      socket?.on(\"newMessage\",(newMessage)=>{\r\n//         console.log(\"newMessageeeeeeee\",newMessage)\r\n\r\n//      dispatch(setMessages([...messages,newMessage]))\r\n//      })\r\n//    },[socket,setMessages,messages])\r\n// }\r\n// export default useGetRealTimeMessage\r\n\r\n\r\n// // import { useEffect } from \"react\";\r\n// // import { useDispatch, useSelector } from \"react-redux\";\r\n// // import { setMessages } from \"../redux/messageSlice\";\r\n\r\n// // const useGetRealTimeMessage = () => {\r\n// //     const { socket } = useSelector((store) => store.socket);\r\n// //     const { messages } = useSelector((store) => store.message);\r\n// //     const dispatch = useDispatch();\r\n\r\n// //     useEffect(() => {\r\n// //         if (socket) {\r\n// //             const handleNewMessage = (newMessage) => {\r\n// //               dispatch(setMessages([...messages, newMessage]));\r\n// //               console.log(\"Received new message:\", newMessage)\r\n// //             };\r\n\r\n// //             socket.on(\"newMessage\", handleNewMessage);\r\n\r\n// //             // Clean up the event listener when the component unmounts\r\n// //             return () => {\r\n// //                 socket.off(\"newMessage\", handleNewMessage);\r\n// //             };\r\n// //         }\r\n// //     }, [socket, messages, dispatch]);\r\n\r\n// //     return null; // No UI output needed from this hook\r\n// // };\r\n\r\n// // export default useGetRealTimeMessage;\r\n\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMessages } from \"../redux/messageSlice\";\r\n\r\nconst useGetRealTimeMessage = (socket) => {\r\n    const messages = useSelector(store => store.message.messages); // Assuming messages is an array in message slice\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (socket) {\r\n            console.log(\"Socket is available\", socket);\r\n            socket.on(\"newMessage\", (newMessage) => {\r\n                console.log(\"newMessage\", newMessage);\r\n                dispatch(setMessages([...messages, newMessage]));\r\n            });\r\n\r\n            // Cleanup to remove the event listener when the component unmounts or socket changes\r\n            return () => {\r\n                socket.off(\"newMessage\");\r\n            };\r\n        }\r\n    }, [socket, messages, dispatch]);\r\n\r\n    return null; // If the hook does not return anything\r\n};\r\n\r\nexport default useGetRealTimeMessage;\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,qBAAqB,GAAIC,MAAM,IAAK;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAMG,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,IAAIK,MAAM,EAAE;MACRM,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEP,MAAM,CAAC;MAC1CA,MAAM,CAACQ,EAAE,CAAC,YAAY,EAAGC,UAAU,IAAK;QACpCH,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,UAAU,CAAC;QACrCJ,QAAQ,CAACP,WAAW,CAAC,CAAC,GAAGI,QAAQ,EAAEO,UAAU,CAAC,CAAC,CAAC;MACpD,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACTT,MAAM,CAACU,GAAG,CAAC,YAAY,CAAC;MAC5B,CAAC;IACL;EACJ,CAAC,EAAE,CAACV,MAAM,EAAEE,QAAQ,EAAEG,QAAQ,CAAC,CAAC;EAEhC,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;AAACJ,EAAA,CApBIF,qBAAqB;EAAA,QACNF,WAAW,EACXD,WAAW;AAAA;AAoBhC,eAAeG,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}