{"ast":null,"code":"var _s = $RefreshSig$();\n// // import React from 'react'\n// // import Message from './Message'\n\n// // const Messages = () => {\n// //   return (\n// //     <div className='px-4 flex-1 overflow-auto'>\n// //       <Message/>\n// //       {/* <Message/>\n// //       <Message/>\n// //       <Message/>\n// //       <Message/> */}\n// //     </div>\n// //   )\n// // }\n\n// // export default Messages\n\n// import React from 'react';\n// import './Messages.css';\n// import Message from './Message';\n// import useGetMessages from '../Hooks/useGetMessages';\n// import { useSelector } from 'react-redux';\n// import useGetRealTimeMessage from '../Hooks/useRealTimeMessages';\n\n// const Messages = () => {\n//   useGetRealTimeMessage()\n\n//   const{messages}=useSelector(store=>store.message)\n//   if(!messages) return;\n//   return (\n//     <div className='messages-container'>\n//       {\n//         messages?.map((message)=>{\n//           return (\n//             <Message key={message._id} message={message}/>\n//           )\n//         })\n//       }\n\n//     </div>\n//   );\n// }\n\n// export default Messages;\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMessages } from \"../redux/messageSlice\";\nconst useGetRealTimeMessage = () => {\n  _s();\n  const {\n    socket\n  } = useSelector(store => store.socket);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (socket) {\n      const handleNewMessage = newMessage => {\n        // Using a function to update state to ensure we always get the latest state\n        dispatch(setMessages(prevMessages => [...prevMessages, newMessage]));\n        console.log(\"Received new message:\", newMessage);\n      };\n      socket.on(\"newMessage\", handleNewMessage);\n\n      // Clean up the event listener when the component unmounts\n      return () => {\n        socket.off(\"newMessage\", handleNewMessage);\n      };\n    }\n  }, [socket, dispatch]);\n  return null; // No UI output needed from this hook\n};\n_s(useGetRealTimeMessage, \"zXFfd9j2Cp66oSgRplAgup8Wf6s=\", false, function () {\n  return [useSelector, useDispatch];\n});\nexport default useGetRealTimeMessage;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setMessages","useGetRealTimeMessage","_s","socket","store","dispatch","handleNewMessage","newMessage","prevMessages","console","log","on","off"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Components/Messages.js"],"sourcesContent":["// // import React from 'react'\r\n// // import Message from './Message'\r\n\r\n// // const Messages = () => {\r\n// //   return (\r\n// //     <div className='px-4 flex-1 overflow-auto'>\r\n// //       <Message/>\r\n// //       {/* <Message/>\r\n// //       <Message/>\r\n// //       <Message/>\r\n// //       <Message/> */}\r\n// //     </div>\r\n// //   )\r\n// // }\r\n\r\n// // export default Messages\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import './Messages.css';\r\n// import Message from './Message';\r\n// import useGetMessages from '../Hooks/useGetMessages';\r\n// import { useSelector } from 'react-redux';\r\n// import useGetRealTimeMessage from '../Hooks/useRealTimeMessages';\r\n\r\n// const Messages = () => {\r\n//   useGetRealTimeMessage()\r\n  \r\n//   const{messages}=useSelector(store=>store.message)\r\n//   if(!messages) return;\r\n//   return (\r\n//     <div className='messages-container'>\r\n//       {\r\n//         messages?.map((message)=>{\r\n//           return (\r\n//             <Message key={message._id} message={message}/>\r\n//           )\r\n//         })\r\n//       }\r\n   \r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Messages;\r\n\r\n\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMessages } from \"../redux/messageSlice\";\r\n\r\nconst useGetRealTimeMessage = () => {\r\n    const { socket } = useSelector((store) => store.socket);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (socket) {\r\n            const handleNewMessage = (newMessage) => {\r\n                // Using a function to update state to ensure we always get the latest state\r\n                dispatch(setMessages(prevMessages => [...prevMessages, newMessage]));\r\n                console.log(\"Received new message:\", newMessage);\r\n            };\r\n\r\n            socket.on(\"newMessage\", handleNewMessage);\r\n\r\n            // Clean up the event listener when the component unmounts\r\n            return () => {\r\n                socket.off(\"newMessage\", handleNewMessage);\r\n            };\r\n        }\r\n    }, [socket, dispatch]);\r\n\r\n    return null; // No UI output needed from this hook\r\n};\r\n\r\nexport default useGetRealTimeMessage;\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAO,CAAC,GAAGJ,WAAW,CAAEK,KAAK,IAAKA,KAAK,CAACD,MAAM,CAAC;EACvD,MAAME,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,IAAIM,MAAM,EAAE;MACR,MAAMG,gBAAgB,GAAIC,UAAU,IAAK;QACrC;QACAF,QAAQ,CAACL,WAAW,CAACQ,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC,CAAC;QACpEE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,UAAU,CAAC;MACpD,CAAC;MAEDJ,MAAM,CAACQ,EAAE,CAAC,YAAY,EAAEL,gBAAgB,CAAC;;MAEzC;MACA,OAAO,MAAM;QACTH,MAAM,CAACS,GAAG,CAAC,YAAY,EAAEN,gBAAgB,CAAC;MAC9C,CAAC;IACL;EACJ,CAAC,EAAE,CAACH,MAAM,EAAEE,QAAQ,CAAC,CAAC;EAEtB,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;AAACH,EAAA,CAtBID,qBAAqB;EAAA,QACJF,WAAW,EACbD,WAAW;AAAA;AAsBhC,eAAeG,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}