{"ast":null,"code":"var _s = $RefreshSig$();\n// import axios from 'axios'\n// import React, { useEffect } from 'react'\n// import { useSelector } from 'react-redux'\n\n// const useGetMessages = () => {\n//     const {selectedUser}=useSelector(store=>store.user)\n//     useEffect(() => {\n//         const fetchMessages = async () => {\n//             try {\n//                 axios.defaults.withCredentials = true\n//                 const response = await axios.get(`http://localhost:8002/message/getMessage/${selectedUser?._id}`)\n//                 console.log(\"Response of getting message is\",response)\n//             } catch (error) {\n//                 console.log(\"Error in getting messages\", error)\n//             }\n//         }\n//         fetchMessages()\n//     }, [])\n//     return (\n//         <div>\n\n//         </div>\n//     )\n// }\n\n// export default useGetMessages\n\nimport axios from 'axios';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setMessages } from '../redux/messageSlice';\nconst useGetMessages = () => {\n  _s();\n  const {\n    selectedUser\n  } = useSelector(store => store.user);\n  const dispatch = useDispatch();\n  console.log(\"Selected User:\", selectedUser); // Debugging line\n\n  useEffect(() => {\n    if (!(selectedUser !== null && selectedUser !== void 0 && selectedUser._id)) return; // Return early if no selectedUser or _id\n\n    const fetchMessages = async () => {\n      try {\n        axios.defaults.withCredentials = true;\n        const response = await axios.get(`http://localhost:8005/message/getMessage/${selectedUser._id}`);\n        console.log(\"Response of getting message is\", response.data); // Log response data\n        dispatch(setMessages(response.data));\n        console.log(\"nfsdongdng\", dispatch(setMessages(response.data)));\n      } catch (error) {\n        console.error(\"Error in getting messages:\", error.response ? error.response.data : error.message); // Improved error handling\n      }\n    };\n    fetchMessages();\n  }, [selectedUser]); // Added dependency\n\n  return null; // No UI rendered by this hook\n};\n_s(useGetMessages, \"RIZGm4dqxFjlZcCQpx+7Enz6bRI=\", false, function () {\n  return [useSelector, useDispatch];\n});\nexport default useGetMessages;","map":{"version":3,"names":["axios","React","useEffect","useDispatch","useSelector","setMessages","useGetMessages","_s","selectedUser","store","user","dispatch","console","log","_id","fetchMessages","defaults","withCredentials","response","get","data","error","message"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Hooks/useGetMessages.js"],"sourcesContent":["// import axios from 'axios'\r\n// import React, { useEffect } from 'react'\r\n// import { useSelector } from 'react-redux'\r\n\r\n// const useGetMessages = () => {\r\n//     const {selectedUser}=useSelector(store=>store.user)\r\n//     useEffect(() => {\r\n//         const fetchMessages = async () => {\r\n//             try {\r\n//                 axios.defaults.withCredentials = true\r\n//                 const response = await axios.get(`http://localhost:8002/message/getMessage/${selectedUser?._id}`)\r\n//                 console.log(\"Response of getting message is\",response)\r\n//             } catch (error) {\r\n//                 console.log(\"Error in getting messages\", error)\r\n//             }\r\n//         }\r\n//         fetchMessages()\r\n//     }, [])\r\n//     return (\r\n//         <div>\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default useGetMessages\r\n\r\nimport axios from 'axios'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setMessages } from '../redux/messageSlice'\r\n\r\nconst useGetMessages = () => {\r\n    const { selectedUser } = useSelector(store => store.user)\r\n    const dispatch=useDispatch()\r\n    console.log(\"Selected User:\", selectedUser) // Debugging line\r\n\r\n    useEffect(() => {\r\n        if (!selectedUser?._id) return // Return early if no selectedUser or _id\r\n\r\n        const fetchMessages = async () => {\r\n            try {\r\n                axios.defaults.withCredentials = true\r\n                const response = await axios.get(`http://localhost:8005/message/getMessage/${selectedUser._id}`)\r\n                console.log(\"Response of getting message is\", response.data) // Log response data\r\n                dispatch(setMessages(response.data))\r\n                console.log(\"nfsdongdng\",dispatch(setMessages(response.data))\r\n            )\r\n            } catch (error) {\r\n                console.error(\"Error in getting messages:\", error.response ? error.response.data : error.message) // Improved error handling\r\n            }\r\n        }\r\n        fetchMessages()\r\n    }, [selectedUser]) // Added dependency\r\n\r\n    return null // No UI rendered by this hook\r\n}\r\n\r\nexport default useGetMessages\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAa,CAAC,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EACzD,MAAMC,QAAQ,GAACR,WAAW,CAAC,CAAC;EAC5BS,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,YAAY,CAAC,EAAC;;EAE5CN,SAAS,CAAC,MAAM;IACZ,IAAI,EAACM,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEM,GAAG,GAAE,OAAM,CAAC;;IAE/B,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACAf,KAAK,CAACgB,QAAQ,CAACC,eAAe,GAAG,IAAI;QACrC,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,4CAA4CX,YAAY,CAACM,GAAG,EAAE,CAAC;QAChGF,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEK,QAAQ,CAACE,IAAI,CAAC,EAAC;QAC7DT,QAAQ,CAACN,WAAW,CAACa,QAAQ,CAACE,IAAI,CAAC,CAAC;QACpCR,OAAO,CAACC,GAAG,CAAC,YAAY,EAACF,QAAQ,CAACN,WAAW,CAACa,QAAQ,CAACE,IAAI,CAAC,CAChE,CAAC;MACD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZT,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAC,EAAC;MACtG;IACJ,CAAC;IACDP,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACP,YAAY,CAAC,CAAC,EAAC;;EAEnB,OAAO,IAAI,EAAC;AAChB,CAAC;AAAAD,EAAA,CAxBKD,cAAc;EAAA,QACSF,WAAW,EACrBD,WAAW;AAAA;AAwB9B,eAAeG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}