{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useEffect } from \"react\"\n// import { useDispatch, useSelector } from \"react-redux\"\n// import { setMessages } from \"../redux/messageSlice\"\n\n// const useGetRealTimeMessage= async()=>{\n//     console.log(\"useGetRealTimeMessage gets hitttt\")\n//     const{socket}=useSelector(store=>store.socket)\n//     console.log(\"socket\",socket)\n\n//     const{messages}=useSelector(store=>store.message)\n//     console.log(\"messages\",messages)\n\n//     const dispatch=useDispatch()\n//    useEffect(()=>{\n//      socket?.on(\"newMessage\",(newMessage)=>{\n\n//      dispatch(setMessages([...messages,newMessage]))\n//      })\n//    },[socket,setMessages,messages])\n// }\n// export default useGetRealTimeMessage\n\n// // import { useEffect } from \"react\";\n// // import { useDispatch, useSelector } from \"react-redux\";\n// // import { setMessages } from \"../redux/messageSlice\";\n\n// // const useGetRealTimeMessage = () => {\n// //     const { socket } = useSelector((store) => store.socket);\n// //     const { messages } = useSelector((store) => store.message);\n// //     const dispatch = useDispatch();\n\n// //     useEffect(() => {\n// //         if (socket) {\n// //             const handleNewMessage = (newMessage) => {\n// //               dispatch(setMessages([...messages, newMessage]));\n// //               console.log(\"Received new message:\", newMessage)\n// //             };\n\n// //             socket.on(\"newMessage\", handleNewMessage);\n\n// //             // Clean up the event listener when the component unmounts\n// //             return () => {\n// //                 socket.off(\"newMessage\", handleNewMessage);\n// //             };\n// //         }\n// //     }, [socket, messages, dispatch]);\n\n// //     return null; // No UI output needed from this hook\n// // };\n\n// // export default useGetRealTimeMessage;\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMessages } from \"../redux/messageSlice\";\nimport { useSocket } from '../Contexts/SocketContext';\nconst useGetRealTimeMessage = () => {\n  _s();\n  const socket = useSocket();\n  const {\n    messages\n  } = useSelector(store => store.message);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"newMessage\", newMessage => {\n        dispatch(setMessages([...messages, newMessage]));\n      });\n    }\n  }, [socket, messages, dispatch]);\n};\n_s(useGetRealTimeMessage, \"mIwDIi+lMtwZvTp+K9C/V+jV0lc=\", false, function () {\n  return [useSocket, useSelector, useDispatch];\n});\nexport default useGetRealTimeMessage;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setMessages","useSocket","useGetRealTimeMessage","_s","socket","messages","store","message","dispatch","on","newMessage"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Hooks/useRealTimeMessages.js"],"sourcesContent":["// import { useEffect } from \"react\"\r\n// import { useDispatch, useSelector } from \"react-redux\"\r\n// import { setMessages } from \"../redux/messageSlice\"\r\n\r\n// const useGetRealTimeMessage= async()=>{\r\n//     console.log(\"useGetRealTimeMessage gets hitttt\")\r\n//     const{socket}=useSelector(store=>store.socket)\r\n//     console.log(\"socket\",socket)\r\n\r\n//     const{messages}=useSelector(store=>store.message)\r\n//     console.log(\"messages\",messages)\r\n\r\n//     const dispatch=useDispatch()\r\n//    useEffect(()=>{\r\n//      socket?.on(\"newMessage\",(newMessage)=>{\r\n\r\n//      dispatch(setMessages([...messages,newMessage]))\r\n//      })\r\n//    },[socket,setMessages,messages])\r\n// }\r\n// export default useGetRealTimeMessage\r\n\r\n\r\n// // import { useEffect } from \"react\";\r\n// // import { useDispatch, useSelector } from \"react-redux\";\r\n// // import { setMessages } from \"../redux/messageSlice\";\r\n\r\n// // const useGetRealTimeMessage = () => {\r\n// //     const { socket } = useSelector((store) => store.socket);\r\n// //     const { messages } = useSelector((store) => store.message);\r\n// //     const dispatch = useDispatch();\r\n\r\n// //     useEffect(() => {\r\n// //         if (socket) {\r\n// //             const handleNewMessage = (newMessage) => {\r\n// //               dispatch(setMessages([...messages, newMessage]));\r\n// //               console.log(\"Received new message:\", newMessage)\r\n// //             };\r\n\r\n// //             socket.on(\"newMessage\", handleNewMessage);\r\n\r\n// //             // Clean up the event listener when the component unmounts\r\n// //             return () => {\r\n// //                 socket.off(\"newMessage\", handleNewMessage);\r\n// //             };\r\n// //         }\r\n// //     }, [socket, messages, dispatch]);\r\n\r\n// //     return null; // No UI output needed from this hook\r\n// // };\r\n\r\n// // export default useGetRealTimeMessage;\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMessages } from \"../redux/messageSlice\";\r\nimport { useSocket } from '../Contexts/SocketContext';\r\n\r\nconst useGetRealTimeMessage = () => {\r\n  const socket = useSocket();\r\n  const { messages } = useSelector(store => store.message);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.on(\"newMessage\", (newMessage) => {\r\n        dispatch(setMessages([...messages, newMessage]));\r\n      });\r\n    }\r\n  }, [socket, messages, dispatch]);\r\n};\r\n\r\nexport default useGetRealTimeMessage;\r\n\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,SAAS,QAAQ,2BAA2B;AAErD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,MAAM,GAAGH,SAAS,CAAC,CAAC;EAC1B,MAAM;IAAEI;EAAS,CAAC,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;EACxD,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,EAAE;MACVA,MAAM,CAACK,EAAE,CAAC,YAAY,EAAGC,UAAU,IAAK;QACtCF,QAAQ,CAACR,WAAW,CAAC,CAAC,GAAGK,QAAQ,EAAEK,UAAU,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACN,MAAM,EAAEC,QAAQ,EAAEG,QAAQ,CAAC,CAAC;AAClC,CAAC;AAACL,EAAA,CAZID,qBAAqB;EAAA,QACVD,SAAS,EACHF,WAAW,EACfD,WAAW;AAAA;AAW9B,eAAeI,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}