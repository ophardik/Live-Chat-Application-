{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMessages } from \"../redux/messageSlice\";\nconst useGetRealTimeMessage = () => {\n  _s();\n  const {\n    socket\n  } = useSelector(store => store.socket);\n  const messages = useSelector(store => store.message.messages); // Assuming messages is an array in message slice\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (socket) {\n      console.log(\"Socket is available\", socket);\n      socket.on(\"newMessage\", newMessage => {\n        console.log(\"newMessage\", newMessage);\n        dispatch(setMessages([...messages, newMessage]));\n      });\n\n      // Cleanup to remove the event listener when the component unmounts or socket changes\n      return () => {\n        socket.off(\"newMessage\");\n      };\n    }\n  }, [socket, messages, dispatch]);\n  return null; // If the hook does not return anything\n};\n_s(useGetRealTimeMessage, \"6CKTaPzADYiVSZWg9kJfE53VDZE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\nexport default useGetRealTimeMessage;","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setMessages","useGetRealTimeMessage","_s","socket","store","messages","message","dispatch","console","log","on","newMessage","off"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Hooks/useRealTimeMessages.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMessages } from \"../redux/messageSlice\";\r\n\r\nconst useGetRealTimeMessage = () => {\r\n    const { socket } = useSelector(store => store.socket);\r\n    const messages = useSelector(store => store.message.messages); // Assuming messages is an array in message slice\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (socket) {\r\n            console.log(\"Socket is available\", socket);\r\n            socket.on(\"newMessage\", (newMessage) => {\r\n                console.log(\"newMessage\", newMessage);\r\n                dispatch(setMessages([...messages, newMessage]));\r\n            });\r\n\r\n            // Cleanup to remove the event listener when the component unmounts or socket changes\r\n            return () => {\r\n                socket.off(\"newMessage\");\r\n            };\r\n        }\r\n    }, [socket, messages, dispatch]);\r\n\r\n    return null; // If the hook does not return anything\r\n};\r\n\r\nexport default useGetRealTimeMessage;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAO,CAAC,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACD,MAAM,CAAC;EACrD,MAAME,QAAQ,GAAGN,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACE,OAAO,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAME,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,IAAIM,MAAM,EAAE;MACRK,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEN,MAAM,CAAC;MAC1CA,MAAM,CAACO,EAAE,CAAC,YAAY,EAAGC,UAAU,IAAK;QACpCH,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,UAAU,CAAC;QACrCJ,QAAQ,CAACP,WAAW,CAAC,CAAC,GAAGK,QAAQ,EAAEM,UAAU,CAAC,CAAC,CAAC;MACpD,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACTR,MAAM,CAACS,GAAG,CAAC,YAAY,CAAC;MAC5B,CAAC;IACL;EACJ,CAAC,EAAE,CAACT,MAAM,EAAEE,QAAQ,EAAEE,QAAQ,CAAC,CAAC;EAEhC,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;AAACL,EAAA,CArBID,qBAAqB;EAAA,QACJF,WAAW,EACbA,WAAW,EACXD,WAAW;AAAA;AAoBhC,eAAeG,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}