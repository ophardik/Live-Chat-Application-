{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardik\\\\OneDrive\\\\Desktop\\\\LiveChatApplication\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import './index.css';\n// import { BrowserRouter, Routes, Route } from 'react-router-dom';\n// import Signup from './Components/Signup';\n// import Login from './Components/Login';\n// import Home from './Components/Home';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useEffect, useState } from 'react';\n// import { io } from \"socket.io-client\";\n// import { setSocket } from './redux/socketSlice';\n// import { setOnlineUsers } from './redux/userSlice';\n\n// function App() {\n//   const { authUser } = useSelector(store => store.user);\n//   const dispatch=useDispatch()\n\n//   useEffect(() => {\n//     if (authUser) {\n//       const socket = io('http://localhost:8005', {\n//         query:{\n//           userId:authUser._id\n//         }\n//         // transports: ['websocket'],\n//         // withCredentials: true\n//       });\n//      dispatch(setSocket(socket)) \n//      socket.on('getOnlineUsers',(onlineUsers)=>{\n//       dispatch(setOnlineUsers(onlineUsers))\n//       console.log(dispatch(setOnlineUsers(onlineUsers)))\n//      })\n\n//       // Handle socket events if needed\n//       socket.on('connect', () => {\n//         console.log('Connected to server');\n//       });\n\n//       return () => {\n//         socket.disconnect();\n//       };\n//     }\n//   }, [authUser]);\n\n//   return (\n//     <BrowserRouter>  \n//       <div className='p-4 h-screen flex items-center justify-center'>\n//         <img src=\"/bg4.jpeg\" alt=\"Background\" className=\"background-image\" />\n//         <Routes>\n//           <Route path=\"/\" element={<Signup />} />\n//           <Route path=\"/login\" element={<Login />} />\n//           <Route path=\"/home\" element={<Home />} />\n//         </Routes>\n//       </div>\n//     </BrowserRouter>\n//   );\n// }\n\n// export default App;\n\n// // import './App.css';\n// // import './index.css';\n// // import { BrowserRouter, Routes, Route } from 'react-router-dom';\n// // import Signup from './Components/Signup';\n// // import Login from './Components/Login';\n// // import Home from './Components/Home';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { useEffect, useState } from 'react';\n// // import { io } from \"socket.io-client\";\n// // import {setSocket} from './redux/socketSlice'\n// // import { setOnlineUsers } from './redux/userSlice';\n\n// // function App() {\n// //   //const [socket, setSocket] = useState(null);\n// //   const { authUser } = useSelector(store => store.user);\n// //   const { socket } = useSelector(store => store.socket);\n// //   const dispatch = useDispatch();\n\n// //   useEffect(() => {\n// //     if (authUser) {\n// //       // Initialize Socket.IO connection\n// //       const socketInstance = io('http://localhost:8005', {\n// //         query: {\n// //           userId: authUser._id\n// //         },\n// //         // transports: ['websocket'], // Optional, uncomment if needed\n// //         // withCredentials: true // Optional, uncomment if needed\n// //       });\n\n// //       setSocket(socketInstance);\n\n// //       // Listen for online users event\n// //       socketInstance.on('getOnlineUsers', (onlineUsers) => {\n// //         dispatch(setOnlineUsers(onlineUsers));\n// //         console.log(\"onlineUsers\",onlineUsers)\n// //       });\n\n// //       // Handle socket connection\n// //       socketInstance.on('connect', () => {\n// //         console.log('Connected to server');\n// //       });\n\n// //       // Cleanup on component unmount\n// //       return () => {\n// //         socketInstance.disconnect();\n// //       };\n// //     }else{\n// //       if(socket){\n// //         socket.close()\n// //         dispatch(setSocket(null))\n// //       }\n// //     }\n// //   }, [authUser, dispatch]);\n\n// //   return (\n// //     <BrowserRouter>\n// //       <div className='p-4 h-screen flex items-center justify-center'>\n// //         <img src=\"/bg4.jpeg\" alt=\"Background\" className=\"background-image\" />\n// //         <Routes>\n// //           <Route path=\"/\" element={<Signup />} />\n// //           <Route path=\"/login\" element={<Login />} />\n// //           <Route path=\"/home\" element={<Home />} />\n// //         </Routes>\n// //       </div>\n// //     </BrowserRouter>\n// //   );\n// // }\n\n// // export default App;\n\n// // import './App.css';\n// // import './index.css';\n// // import { BrowserRouter, Routes, Route } from 'react-router-dom';\n// // import Signup from './Components/Signup';\n// // import Login from './Components/Login';\n// // import Home from './Components/Home';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { useEffect } from 'react';\n// // import { io } from \"socket.io-client\";\n// // import { setSocket } from './redux/socketSlice';\n// // import { setOnlineUsers } from './redux/userSlice';\n\n// // function App() {\n// //   const { authUser } = useSelector(store => store.user);\n// //   const { socket } = useSelector(store => store.socket);\n// //   const dispatch = useDispatch();\n\n// //   useEffect(() => {\n// //     if (authUser) {\n// //       const socketInstance = io('http://localhost:8005', {\n// //         query: {\n// //           userId: authUser._id\n// //         },\n// //       });\n\n// //       dispatch(setSocket(socketInstance));\n\n// //       socketInstance.on('getOnlineUsers', (onlineUsers) => {\n// //         dispatch(setOnlineUsers(onlineUsers));\n// //       });\n\n// //       socketInstance.on('connect', () => {\n// //         console.log('Connected to server');\n// //       });\n\n// //       return () => {\n// //         socketInstance.disconnect();\n// //       };\n// //     } else {\n// //       if (socket) {\n// //         socket.close();\n// //         dispatch(setSocket(null));\n// //       }\n// //     }\n// //   }, [authUser, dispatch, socket]);\n\n// //   return (\n// //     <BrowserRouter>\n// //       <div className='p-4 h-screen flex items-center justify-center'>\n// //         <img src=\"/bg4.jpeg\" alt=\"Background\" className=\"background-image\" />\n// //         <Routes>\n// //           <Route path=\"/\" element={<Signup />} />\n// //           <Route path=\"/login\" element={<Login />} />\n// //           <Route path=\"/home\" element={<Home />} />\n// //         </Routes>\n// //       </div>\n// //     </BrowserRouter>\n// //   );\n// // }\n\n// // export default App;\n\nimport './App.css';\nimport './index.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Signup from './Components/Signup';\nimport Login from './Components/Login';\nimport Home from './Components/Home';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { io } from \"socket.io-client\";\nimport { setOnlineUsers } from './redux/userSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    authUser\n  } = useSelector(store => store.user);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (authUser) {\n      const socket = io('http://localhost:8005', {\n        query: {\n          userId: authUser._id\n        }\n      });\n      socket.on('getOnlineUsers', onlineUsers => {\n        dispatch(setOnlineUsers(onlineUsers));\n      });\n\n      // Handle socket events if needed\n      socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n      return () => {\n        socket.disconnect();\n      };\n    }\n  }, [authUser, dispatch]);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 h-screen flex items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/bg4.jpeg\",\n        alt: \"Background\",\n        className: \"background-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/home\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T9imuEFIrHeltt7cap/dokt8iJs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BrowserRouter","Routes","Route","Signup","Login","Home","useDispatch","useSelector","useEffect","io","setOnlineUsers","jsxDEV","_jsxDEV","App","_s","authUser","store","user","dispatch","socket","query","userId","_id","on","onlineUsers","console","log","disconnect","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/App.js"],"sourcesContent":["// import './App.css';\n// import './index.css';\n// import { BrowserRouter, Routes, Route } from 'react-router-dom';\n// import Signup from './Components/Signup';\n// import Login from './Components/Login';\n// import Home from './Components/Home';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useEffect, useState } from 'react';\n// import { io } from \"socket.io-client\";\n// import { setSocket } from './redux/socketSlice';\n// import { setOnlineUsers } from './redux/userSlice';\n\n// function App() {\n//   const { authUser } = useSelector(store => store.user);\n//   const dispatch=useDispatch()\n\n//   useEffect(() => {\n//     if (authUser) {\n//       const socket = io('http://localhost:8005', {\n//         query:{\n//           userId:authUser._id\n//         }\n//         // transports: ['websocket'],\n//         // withCredentials: true\n//       });\n//      dispatch(setSocket(socket)) \n//      socket.on('getOnlineUsers',(onlineUsers)=>{\n//       dispatch(setOnlineUsers(onlineUsers))\n//       console.log(dispatch(setOnlineUsers(onlineUsers)))\n//      })\n\n//       // Handle socket events if needed\n//       socket.on('connect', () => {\n//         console.log('Connected to server');\n//       });\n\n//       return () => {\n//         socket.disconnect();\n//       };\n//     }\n//   }, [authUser]);\n\n//   return (\n//     <BrowserRouter>  \n//       <div className='p-4 h-screen flex items-center justify-center'>\n//         <img src=\"/bg4.jpeg\" alt=\"Background\" className=\"background-image\" />\n//         <Routes>\n//           <Route path=\"/\" element={<Signup />} />\n//           <Route path=\"/login\" element={<Login />} />\n//           <Route path=\"/home\" element={<Home />} />\n//         </Routes>\n//       </div>\n//     </BrowserRouter>\n//   );\n// }\n\n// export default App;\n\n\n   \n\n// // import './App.css';\n// // import './index.css';\n// // import { BrowserRouter, Routes, Route } from 'react-router-dom';\n// // import Signup from './Components/Signup';\n// // import Login from './Components/Login';\n// // import Home from './Components/Home';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { useEffect, useState } from 'react';\n// // import { io } from \"socket.io-client\";\n// // import {setSocket} from './redux/socketSlice'\n// // import { setOnlineUsers } from './redux/userSlice';\n\n// // function App() {\n// //   //const [socket, setSocket] = useState(null);\n// //   const { authUser } = useSelector(store => store.user);\n// //   const { socket } = useSelector(store => store.socket);\n// //   const dispatch = useDispatch();\n\n// //   useEffect(() => {\n// //     if (authUser) {\n// //       // Initialize Socket.IO connection\n// //       const socketInstance = io('http://localhost:8005', {\n// //         query: {\n// //           userId: authUser._id\n// //         },\n// //         // transports: ['websocket'], // Optional, uncomment if needed\n// //         // withCredentials: true // Optional, uncomment if needed\n// //       });\n\n// //       setSocket(socketInstance);\n\n// //       // Listen for online users event\n// //       socketInstance.on('getOnlineUsers', (onlineUsers) => {\n// //         dispatch(setOnlineUsers(onlineUsers));\n// //         console.log(\"onlineUsers\",onlineUsers)\n// //       });\n\n// //       // Handle socket connection\n// //       socketInstance.on('connect', () => {\n// //         console.log('Connected to server');\n// //       });\n\n// //       // Cleanup on component unmount\n// //       return () => {\n// //         socketInstance.disconnect();\n// //       };\n// //     }else{\n// //       if(socket){\n// //         socket.close()\n// //         dispatch(setSocket(null))\n// //       }\n// //     }\n// //   }, [authUser, dispatch]);\n\n// //   return (\n// //     <BrowserRouter>\n// //       <div className='p-4 h-screen flex items-center justify-center'>\n// //         <img src=\"/bg4.jpeg\" alt=\"Background\" className=\"background-image\" />\n// //         <Routes>\n// //           <Route path=\"/\" element={<Signup />} />\n// //           <Route path=\"/login\" element={<Login />} />\n// //           <Route path=\"/home\" element={<Home />} />\n// //         </Routes>\n// //       </div>\n// //     </BrowserRouter>\n// //   );\n// // }\n\n// // export default App;\n\n// // import './App.css';\n// // import './index.css';\n// // import { BrowserRouter, Routes, Route } from 'react-router-dom';\n// // import Signup from './Components/Signup';\n// // import Login from './Components/Login';\n// // import Home from './Components/Home';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { useEffect } from 'react';\n// // import { io } from \"socket.io-client\";\n// // import { setSocket } from './redux/socketSlice';\n// // import { setOnlineUsers } from './redux/userSlice';\n\n// // function App() {\n// //   const { authUser } = useSelector(store => store.user);\n// //   const { socket } = useSelector(store => store.socket);\n// //   const dispatch = useDispatch();\n\n// //   useEffect(() => {\n// //     if (authUser) {\n// //       const socketInstance = io('http://localhost:8005', {\n// //         query: {\n// //           userId: authUser._id\n// //         },\n// //       });\n\n// //       dispatch(setSocket(socketInstance));\n\n// //       socketInstance.on('getOnlineUsers', (onlineUsers) => {\n// //         dispatch(setOnlineUsers(onlineUsers));\n// //       });\n\n// //       socketInstance.on('connect', () => {\n// //         console.log('Connected to server');\n// //       });\n\n// //       return () => {\n// //         socketInstance.disconnect();\n// //       };\n// //     } else {\n// //       if (socket) {\n// //         socket.close();\n// //         dispatch(setSocket(null));\n// //       }\n// //     }\n// //   }, [authUser, dispatch, socket]);\n\n// //   return (\n// //     <BrowserRouter>\n// //       <div className='p-4 h-screen flex items-center justify-center'>\n// //         <img src=\"/bg4.jpeg\" alt=\"Background\" className=\"background-image\" />\n// //         <Routes>\n// //           <Route path=\"/\" element={<Signup />} />\n// //           <Route path=\"/login\" element={<Login />} />\n// //           <Route path=\"/home\" element={<Home />} />\n// //         </Routes>\n// //       </div>\n// //     </BrowserRouter>\n// //   );\n// // }\n\n// // export default App;\n\nimport './App.css';\nimport './index.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Signup from './Components/Signup';\nimport Login from './Components/Login';\nimport Home from './Components/Home';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { io } from \"socket.io-client\";\nimport { setOnlineUsers } from './redux/userSlice';\n\nfunction App() {\n  const { authUser } = useSelector(store => store.user);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (authUser) {\n      const socket = io('http://localhost:8005', {\n        query: {\n          userId: authUser._id\n        }\n      });\n\n      socket.on('getOnlineUsers', (onlineUsers) => {\n        dispatch(setOnlineUsers(onlineUsers));\n      });\n\n      // Handle socket events if needed\n      socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n\n      return () => {\n        socket.disconnect();\n      };\n    }\n  }, [authUser, dispatch]);\n\n  return (\n    <BrowserRouter>\n      <div className='p-4 h-screen flex items-center justify-center'>\n        <img src=\"/bg4.jpeg\" alt=\"Background\" className=\"background-image\" />\n        <Routes>\n          <Route path=\"/\" element={<Signup />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/home\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,WAAW;AAClB,OAAO,aAAa;AACpB,SAASA,aAAa,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC/D,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,EAAE,QAAQ,kBAAkB;AACrC,SAASC,cAAc,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM;IAAEC;EAAS,CAAC,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;EACrD,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9BE,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,EAAE;MACZ,MAAMI,MAAM,GAAGV,EAAE,CAAC,uBAAuB,EAAE;QACzCW,KAAK,EAAE;UACLC,MAAM,EAAEN,QAAQ,CAACO;QACnB;MACF,CAAC,CAAC;MAEFH,MAAM,CAACI,EAAE,CAAC,gBAAgB,EAAGC,WAAW,IAAK;QAC3CN,QAAQ,CAACR,cAAc,CAACc,WAAW,CAAC,CAAC;MACvC,CAAC,CAAC;;MAEF;MACAL,MAAM,CAACI,EAAE,CAAC,SAAS,EAAE,MAAM;QACzBE,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MACpC,CAAC,CAAC;MAEF,OAAO,MAAM;QACXP,MAAM,CAACQ,UAAU,CAAC,CAAC;MACrB,CAAC;IACH;EACF,CAAC,EAAE,CAACZ,QAAQ,EAAEG,QAAQ,CAAC,CAAC;EAExB,oBACEN,OAAA,CAACZ,aAAa;IAAA4B,QAAA,eACZhB,OAAA;MAAKiB,SAAS,EAAC,+CAA+C;MAAAD,QAAA,gBAC5DhB,OAAA;QAAKkB,GAAG,EAAC,WAAW;QAACC,GAAG,EAAC,YAAY;QAACF,SAAS,EAAC;MAAkB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrEvB,OAAA,CAACX,MAAM;QAAA2B,QAAA,gBACLhB,OAAA,CAACV,KAAK;UAACkC,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEzB,OAAA,CAACT,MAAM;YAAA6B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCvB,OAAA,CAACV,KAAK;UAACkC,IAAI,EAAC,QAAQ;UAACC,OAAO,eAAEzB,OAAA,CAACR,KAAK;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC3CvB,OAAA,CAACV,KAAK;UAACkC,IAAI,EAAC,OAAO;UAACC,OAAO,eAAEzB,OAAA,CAACP,IAAI;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEpB;AAACrB,EAAA,CAvCQD,GAAG;EAAA,QACWN,WAAW,EACfD,WAAW;AAAA;AAAAgC,EAAA,GAFrBzB,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}