{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hardik\\\\OneDrive\\\\Desktop\\\\LiveChatApplication\\\\frontend\\\\src\\\\Components\\\\Messages.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import './Messages.css';\n// import Message from './Message';\n// import useGetRealTimeMessage from '../Hooks/useRealTimeMessages';\n// import { useSelector } from 'react-redux';\n\n// const Messages = () => {\n//     useGetRealTimeMessage(); // Set up real-time messaging\n\n//     const { messages } = useSelector(store => store.message);\n\n//     if (!messages || messages.length === 0) return <div>No messages</div>;\n\n//     return (\n//         <div className='messages-container'>\n//             {messages.map((message) => (\n//                 <Message key={message._id} message={message} />\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default Messages;\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Messages = () => {\n  _s();\n  const {\n    messages\n  } = useSelector(store => store.message);\n  const {\n    authUser,\n    selectedUser\n  } = useSelector(store => store.user);\n  if (!authUser || !selectedUser) {\n    return null; // Or return a placeholder, like a loading spinner or a message.\n  }\n  const filteredMessages = messages.filter(message => message.senderId === authUser._id && message.receiverId === selectedUser._id || message.receiverId === authUser._id && message.senderId === selectedUser._id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: filteredMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.senderId === authUser._id ? 'sent' : 'received'}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Messages, \"orgCMSti5A49sR80ItJ26/MpSS4=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useSelector","jsxDEV","_jsxDEV","Messages","_s","messages","store","message","authUser","selectedUser","user","filteredMessages","filter","senderId","_id","receiverId","className","children","map","index","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hardik/OneDrive/Desktop/LiveChatApplication/frontend/src/Components/Messages.js"],"sourcesContent":["\r\n\r\n// import React from 'react';\r\n// import './Messages.css';\r\n// import Message from './Message';\r\n// import useGetRealTimeMessage from '../Hooks/useRealTimeMessages';\r\n// import { useSelector } from 'react-redux';\r\n\r\n// const Messages = () => {\r\n//     useGetRealTimeMessage(); // Set up real-time messaging\r\n\r\n//     const { messages } = useSelector(store => store.message);\r\n\r\n//     if (!messages || messages.length === 0) return <div>No messages</div>;\r\n\r\n//     return (\r\n//         <div className='messages-container'>\r\n//             {messages.map((message) => (\r\n//                 <Message key={message._id} message={message} />\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Messages;\r\n\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Messages = () => {\r\n  const { messages } = useSelector(store => store.message);\r\n  const { authUser, selectedUser } = useSelector(store => store.user);\r\n\r\n  if (!authUser || !selectedUser) {\r\n    return null; // Or return a placeholder, like a loading spinner or a message.\r\n  }\r\n\r\n  const filteredMessages = messages.filter(\r\n    message =>\r\n      (message.senderId === authUser._id && message.receiverId === selectedUser._id) ||\r\n      (message.receiverId === authUser._id && message.senderId === selectedUser._id)\r\n  );\r\n\r\n  return (\r\n    <div className=\"messages\">\r\n      {filteredMessages.map((message, index) => (\r\n        <div key={index} className={`message ${message.senderId === authUser._id ? 'sent' : 'received'}`}>\r\n          <p>{message.text}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAS,CAAC,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;EACxD,MAAM;IAAEC,QAAQ;IAAEC;EAAa,CAAC,GAAGT,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACI,IAAI,CAAC;EAEnE,IAAI,CAACF,QAAQ,IAAI,CAACC,YAAY,EAAE;IAC9B,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,MAAME,gBAAgB,GAAGN,QAAQ,CAACO,MAAM,CACtCL,OAAO,IACJA,OAAO,CAACM,QAAQ,KAAKL,QAAQ,CAACM,GAAG,IAAIP,OAAO,CAACQ,UAAU,KAAKN,YAAY,CAACK,GAAG,IAC5EP,OAAO,CAACQ,UAAU,KAAKP,QAAQ,CAACM,GAAG,IAAIP,OAAO,CAACM,QAAQ,KAAKJ,YAAY,CAACK,GAC9E,CAAC;EAED,oBACEZ,OAAA;IAAKc,SAAS,EAAC,UAAU;IAAAC,QAAA,EACtBN,gBAAgB,CAACO,GAAG,CAAC,CAACX,OAAO,EAAEY,KAAK,kBACnCjB,OAAA;MAAiBc,SAAS,EAAE,WAAWT,OAAO,CAACM,QAAQ,KAAKL,QAAQ,CAACM,GAAG,GAAG,MAAM,GAAG,UAAU,EAAG;MAAAG,QAAA,eAC/Ff,OAAA;QAAAe,QAAA,EAAIV,OAAO,CAACa;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,GADbL,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpB,EAAA,CAvBID,QAAQ;EAAA,QACSH,WAAW,EACGA,WAAW;AAAA;AAAAyB,EAAA,GAF1CtB,QAAQ;AAyBd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}